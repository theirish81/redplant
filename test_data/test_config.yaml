# Loading global variables from external file
variables: "$ref:file://variables.yaml"

# Loading network configuration from external file
network: "$ref:file://network.yaml"

# Transformers and sidecars to be executed BEFORE transformers and sidecars defined for the specific route
before:
  request:
    transformers:
      # Very basic auth, using global variable for credentials
      - id: basicAuth
        params:
          username: "{{.Variables.UN}}"
          password: "{{.Variables.PW}}"
      # Dumb barrage, will block any request with a header value containing "log4j"
      - id: barrage
        params:
          headerValueRegexp: ".*log4j.*"
      # Will send an X-Server header with the value provided by the global variables
      - id: headers
        params:
          set:
            X-Server: "{{.Variables.SERVER_NAME}}"
    sidecars:
      # Access logs the request
      - id: accessLog
        workers: 1
        block: true
  response:
    transformers:
      - id: headers
        workers: 1
        params:
          set:
            X-Proxied: "true"
    sidecars:
      # Access logs the response
      - id: accessLog
        workers: 1
        block: true
      - id: metricsLog
        workers: 1
        block: true

# THE RULES. They represent how an inbound request should be matched, and defines the transformation rules
rules:
  # The inbound host. This is a regexp. Also, the path matchers are regexp
  localhost:9001:
    # File server route. Will load and return data loaded from FS
    "/fs/.*":
      # Path to the files
      origin: file://test_data/files
      request:
        # The request transformers
        transformers:
          # As the inbound path gets appended to the origin, we need to rewrite the URL
          - id: url
            params:
              oldPrefix: "/files/fs"
              newPrefix: "/files"
    # A web route
    "/todo/.*":
      origin: https://jsonplaceholder.typicode.com/todos
      request:
        transformers:
          - id: scriptable
            params:
              path:
                test_data/scripts/gino.js
          - id: url
            params:
              oldPrefix: "/todos/todo"
              newPrefix: "/todos"
          - id: headers
            params:
              set:
                username: "{{.Username}}"
                "user-agent": "{{.Variables.userAgent}}"
              remove:
                - authorization
      response:
        transformers:
          - id: headers
            params:
              set:
                resfoo: resbar
        sidecars:
          - id: capture
            workers: 2
            block: true
            params:
              uri: "{{.Variables.CAPTURE_URI}}"
              responseContentTypeRegexp: '.*json.*'
              requestContentTypeRegexp: '(^$|.*json.*)'
              format: JSON