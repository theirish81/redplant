# Loading global variables from external file
variables: "$ref:file://variables.yaml"

# Loading network configuration from external file
network: "$ref:file://network.yaml"

## Uncomment this block to try the OpenAPI integration
# openAPI:
#  'localhost:9001':
#    file: etc/openapi.yaml

# Transformers and sidecars to be executed BEFORE transformers and sidecars defined for the specific route
before:
  request:                                 # Request transformers
    transformers:
      - id: basic-auth                      # Very basic auth, using global variable for credentials
        params:
          username: "${Variables.UN}"
          password: "${Variables.PW}"
      - id: barrage                       # Dumb barrage, will block any request with a header value containing "log4j"
        params:
          headerValueRegexp: ".*log4j.*"
      - id: headers                       # Will send an X-Server header with the value provided by the global variables
        params:
          set:
            X-Server: "${Variables.SERVER_NAME}"
    sidecars:
      - id: access-log                     # Access logs the request as it reaches the reverse proxy. blocking
        workers: 1                        # 1 worker, queue=2
        queue: 2
        block: true
  response:                               # Response transformers
    transformers:
      - id: headers                       # Adding a X-Proxied response header
        workers: 1
        params:
          set:
            X-Proxied: "true"
    sidecars:                             # Response sidecars
      - id: access-log                     # Access logs the response
        workers: 1
        queue: 2
        block: true
      - id: metrics-log                    # Logs the metrics
        workers: 1
        queue: 2
        block: true

rules: # THE RULES. They represent how an inbound request should be matched, and defines the transformation rules
  localhost:9001:                     # The inbound host. This is a regexp. Also, the path matchers are regexp
    "/fs/{file}":                         # File server route. Will load and return data loaded from FS
      origin: file://etc/files  # Path to the files
      stripPrefix: /fs                # We're stripping the "/fs" from the final URL
    "/todo/{id}": # A web route
      origin: https://jsonplaceholder.typicode.com/todos  # the HTTP origin
      stripPrefix: /todo
      request:                                            # Request configuration
        transformers:                                     # Transformers
          - id: scriptable                                # Scriptable transformer
            params:
              path:
                etc/scripts/gino.js
          - id: headers                                   # Headers transformer
            params:
              set:
                username: "${Username}"                 # Setting dynamic headers
                "user-agent": "${Variables.userAgent}"
              remove:
                - authorization
      response:                                           # Response configuration
        transformers:                                     # Transformers
          - id: headers                                   # Headers transformer
            params:
              set:
                resfoo: resbar                            # Setting a response header
        sidecars:                                         # Sidecars
          - id: capture                                   # Capture transformer
            workers: 2                                    # 2 blocking workers with a queue=2
            block: true
            queue: 2
            params:
              uri: "${Variables.CAPTURE_URI}"
              responseContentTypeRegexp: '.*json.*'
              requestContentTypeRegexp: '(^$|.*json.*)'
              format: JSON